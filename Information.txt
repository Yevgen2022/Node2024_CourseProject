North Star

.Зробити “Auth & Sessions Service” (MVC + middleware) з підтримкою мультилогіну, який можна:

.використати як самостійний pet-проєкт (API + базові сторінки);

.вмонтувати у будь-який інший Node/React проєкт як модуль/сервіс;

.масштабувати до мікросервісу без переписування.

Архітектура (лаконично)

.Express + MVC (Controller → Service → Repository), Sequelize/Prisma для БД.

.Middleware: auth, error handler, rate-limit, cors.

.Конфіг через .env (dotenv), окремий config/.

.Логи: pino/winston.

.Валідація: zod/express-validator (DTO).

.Документація: OpenAPI (swagger-ui).

.Тести: Jest + supertest.

.Docker: Dockerfile + docker-compose (app + db + optional redis).

Функціонал (MVP)

.Auth (session-based, мультилогін):

     .POST /api/auth/register

     .POST /api/auth/login → httpOnly cookie auth, строк придатності, кілька сесій на юзера

     .POST /api/auth/logout (поточна сесія)

     .GET /api/auth/sessions (список активних), DELETE /api/auth/sessions/:id (revoke)

     .GET /api/me

.Roles/ACL: простий user/admin middleware.

.Паролі: bcrypt, change-password, forgot/reset (лист — фейковий/консоль).

.HTML-сторінки (опціонально): /login, /admin з редіректами на основі сесії.

.Стандартизовані помилки: { code, message, details, traceId } + коректні status codes.

Нефункціональні вимоги

.12-factor конфіг, ідемпотентні міграції, обмеження швидкості на login, CSRF (якщо форм-POST), Helmet.

.Готовність до мікросервісу: витягнути сервіс аутентифікації в окремий пакет (packages/auth-service) або окремий контейнер; міжсервісний інтерфейс не змінюється (REST/OpenAPI).

Структура проєкту
src/
  app.ts
  server.ts
  routes/
    auth.routes.ts
    user.routes.ts
  controllers/
    auth.controller.ts
  services/
    auth.service.ts
  repositories/
    authkey.repo.ts
    user.repo.ts
  middleware/
    auth.middleware.ts
    error.middleware.ts
  models/            # Sequelize/Prisma схеми
  utils/
  config/
tests/
docs/

Контракт помилок (єдиний формат)
{
  "error": { "code": "AUTH_INVALID", "message": "Invalid credentials", "details": null, "traceId": "..." }
}

Що показувати як “результат” (щоб виглядало зріло)

.README з архітектурою, ER-діаграмою, curl-прикладами і скріншотами swagger.

.OpenAPI (swagger) сторінка.

.docker-compose up запускає усе за 1 команду.

.10–15 юніт/інтеграційних тестів (login, me, sessions, revoke, admin guard).

Розширення (roadmap)

.Варіант JWT (паралельний провайдер), toggle через env.

.Заміна зберігання сесій на Redis Store.

.MFA (TOTP) як опція.

.Веб-хуки/події “session.created/session.revoked”.

Практичні кроки (спринт 1–2)

.Винести все у шари: controller/service/repo + централізований error handler.

.Впровадити sessions list + revoke (твоя фіча мультилогіну стане “видимою”).

.Додати swagger, уніфіковані відповіді, статус-коди.

.Обгорнути в Docker, написати 5–8 тестів.



                        Ціль

1.Auth & Sessions Service (MVC + middleware) з мультилогіном, який можна:

2.запускати як самостійний pet-проєкт (REST API + базові сторінки),

3.підключати як модуль у будь-який Node/React проєкт,

безболісно винести в мікросервіс.

               Definition of Done (короткий чеклист)

*Архітектура: Express + MVC (Controllers → Services → Repos/Models).

*Роути v1: POST /auth/register, POST /auth/login, POST /auth/logout,
GET /auth/sessions, DELETE /auth/sessions/:id, GET /me.

*Мультилогін: кілька активних сесій/пристроїв на користувача; ревок окремої сесії.

*Middleware: auth (cookie/session), error handler (єдиний формат помилок), rate-limit, CORS, Helmet, logger.

*Конфіг: .env, 12-factor; статус-коди та уніфікований JSON для помилок.

*БД: міграції + сидування (users, sessions/authkeys).

*Документація: OpenAPI/Swagger з прикладами.

*Тести: Jest + supertest (10–15 кейсів: login, me, sessions, revoke, guards).

*DevX: Docker/Docker Compose (app + db), npm run dev, npm run test.

*UI (опція): прості сторінки /login, /admin з редіректами за станом сесії.

*Підготовка до мікросервісу: префікс /api/v1, конфігурований порт/host, чіткі межі модуля auth; можливість виділити пакет @your-scope/auth-service.

Мінімальна структура
src/
  app.ts|js, server.ts|js
  routes/ (auth.routes, user.routes)
  controllers/ (auth.controller)
  services/ (auth.service)
  repositories/ (user.repo, session.repo)
  models/ (User, Session)
  middleware/ (auth, error, rateLimit, cors, logger)
  config/ (.env loader)
tests/
docs/ (openapi.yaml)

План на 2–3 ітерації

1.Виділити шари (controller/service/repo) + централізований error handler + базові роуты.

2.Реалізувати мультилогін: список/ревок сесій, Set-Cookie httpOnly + security флаги.

3.Swagger, тести, Docker, README з curl-прикладами.
